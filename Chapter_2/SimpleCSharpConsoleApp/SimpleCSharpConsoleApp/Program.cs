// ГЛАВА 2

// Создание приложений на языке C#

// Как программист на языке С#, вы можете выбрать подходящий инструмент среди
// многочисленных средств для построения приложений .NET. Выбор инструмента
// (или инструментов) будет осуществляться главным образом на основе трех факторов:
// сопутствующие финансовые затраты, операционная система (ОС), используемая
// при разработке программного обеспечения, и вычислительные платформы, на которые
// оно должно ориентироваться. Цель настоящей главы — предоставить обзор наиболее
// распространенных интегрированных сред разработки (integrated development environment — IDE),
// которые поддерживают язык С#. Вы должны иметь в виду, что здесь не
// будут описаны мельчайшие подробности каждой IDE-среды. В главе лишь предоставляется
// достаточный объем информации для того, чтобы вы сумели успешно установить
// среду программирования, и формируется основа, позволяющая двигаться дальше.

// В первой части главы будет исследоваться набор IDE-сред от Microsoft, которые дают
// возможность разрабатывать приложения .NET в среде ОС Windows (7, 8.x и 10). Вы увидите,
// что некоторые IDE-среды могут применяться для построения только приложений,
// ориентированных на Windows, в то время как другие поддерживают создание приложений
// С#, ориентированных на альтернативные ОС и устройства (наподобие macOS,
// Linux или Android). Во второй части главы будут рассматриваться IDE-среды, которые
// могут выполняться под управлением ОС, отличающейся от Windows. С их помощью
// разработчики имеют возможность строить программы на С#, используя компьютеры
// Apple, а также дистрибутивы Linux.

// На заметку!
// В этой главе будет предложен обзор довольно большого числа IDE-сред. Тем не менее,
// во всей книге предполагается, что вы применяете (совершенно бесплатную) IDE - среду
// Visual Studio 2017 Community. Если вы хотите строить свои приложения в среде другой ОС (macOS
// или Linux), то глава укажет правильное направление, но окна выбранной вами IDE-среды
// будут отличаться от тех, которые изображены на экранных снимках, приводимых в тексте.

// Каждая IDE-среда поставляется с развитыми редакторами кода, основными визуальными
// конструкторами баз данных, встроенными визуальными отладчиками, визуальными
// конструкторами графических пользовательских интерфейсов для настольных
// веб-приложений и т.д. Поскольку все они разделяют общий набор основных средств,
// между ними легко перемещаться и чувствовать себя вполне комфортно в отношении их
// стандартной эксплуатации.

// Установка Visual Studio 2017

// Прежде чем среду Visual Studio 2017 можно будет использовать для разработки, запуска
// и отладки приложений С#, ее понадобится установить. Процесс установки значительно
// отличается от предшествующих версий, а потому полезно обсудить его более подробно.

// На заметку!
// Загрузить Visual Studio 2017 Community можно по адресу https://www.visualstudio.com/downloads

// Процесс установки Visual Studio 2017 теперь разбит на рабочие нагрузки по типам
// приложений. В результате появляется возможность устанавливать только те компоненты,
// которые нужны для выполнения планируемых работ. Например, если вы собираетесь
// строить веб-приложения, тогда должны установить рабочую нагрузку ‘ASP.NET and
// web development” (“Разработка приложений ASPNET и веб-приложений”).

// Еще одно(крайне) важное изменение связано с тем, что Visual Studio 2017 поддерживает
// подлинную установку бок о бок. Обратите внимание, что речь не о параллельной
// установке с предшествующими версиями, а о самой среде Visual Studio 2017! На главной
// рабочей станции может быть установлена редакция Visual Studio 2017 Enterprise.
// Для работы с этой книгой будет применяться редакция Visual Studio Community. В случае
// версии Visual Studio 2015 (и предыдущего издания данной книги) в подобной ситуации
// приходилось использовать разные машины. Теперь все можно делать на одной
// машине. При наличии редакции Professional или Enterprise, предоставленной вашим
// работодателем, вы по-прежнему можете установить редакцию Community для работы
// над проектами с открытым кодом (или с кодом данной книги).

// После запуска программы установки Visual Studio 2017 Community появляется экран,
// показанный на рис. 2.1. На нем предлагаются все доступные рабочие нагрузки,
// возможность выбора отдельных компонентов и сводка (в правой части), которая отображает,
// что было выбрано. Обратите внимание на предупреждение в нижней части экрана:
// “A nickname must be provided to disambiguate this install” (“Для разрешения неоднозначности
// данной установки должен быть предоставлен псевдоним”). Причина в том,
// что на текущей машине присутствуют другие установленные копии Visual Studio 2017.
// Если установка производится впервые, то такое предупреждение не отображается.

// Для настоящей книги понадобится установить следующие рабочие нагрузки:

// • .NET desktop development (Разработка настольных приложений .NET)
// • ASP.NET and web development (Разработка приложений ASP.NET и вебприложений)
// • Data storage and processing (Хранилище и обработка данных)
// • .NET Core cross-platform development (Разработка межплатформенных приложений .NET Core)

// Также придется добавить псевдоним установки — РгоС#. Результирующий экран представлен на рис. 2.2.

// ерейдите на вкладку Individual Components (Отдельные компоненты) в верхней части
// экрана и выберите перечисленные ниже дополнительные элементы:

// • .NET Core runtime (Исполняющая среда .NET Core)
// • .NET Framework 4.6.2 SDK (Комплект .NET Framework 4.6.2 SDK)
// • .NET Framework 4.6.2 targeting pack (Целевой пакет .NET Framework 4.6.2)
// • .NET Framework 4.7 SDK (Комплект .NET Framework 4.7 SDK)
// • .NET Framework 4.7 targeting pack (Целевой пакет .NET Framework 4.7)
// • Class Designer(Визуальный конструктор классов)
// • Testing tools core features (Основные функциональные возможности инструментов тестирования)
// • Visual Studio Tools for Office (VSTO) (Инструменты Visual Studio для офиса)

// После выбора всех указанных элементов щелкните на кнопке Install (Установить).
// В итоге вам будет предоставлено все. что необходимо для проработки примеров в настоящей
// книге, включая новую часть по .NET Core.

// Испытание Visual Studio 2017

// Среда Visual Studio 2017 — это универсальный инструмент для разработки программного
// обеспечения с помощью платформы .NET и языка С#. Давайте бегло посмотрим
// на работу Visual Studio, построив простое консольное приложение Windows.

// Построение приложений .NET

// В качестве первого дела мы посвятим какое-то время построению простого приложения
// С#, памятуя о том, что проиллюстрированные здесь аспекты относятся ко всем
// редакциям Visual Studio.

// Диалоговое окно New Project и редактор кода C#

// Теперь, имея установленную копию Visual Studio, выберите пункт меню File->New
// Project (Файл->Создать проект). Как видно в открывшемся диалоговом окне New Project
// (Новый проект), показанном на рис. 2.3, данная IDE-среда предлагает поддержку для
// консольных приложений, приложений WPF/Windows Forms, служб Windows и многого
// другого, Для начала создайте новый проект Console Арр (Консольное приложение) на
// C# по имени SimpleCSharpConsoleApp, не забыв изменить целевую версию платформы на .NET Framework 4.7.

// На рис. 2.3 легко заметить, что среда Visual Studio способна создавать множество
// типов приложений, в том числе настольные приложения Windows, веб-приложения,
// приложения.NET Core и т.д. Они будут рассматриваться повсеместно в этой книге.

// На заметку!
// Если в раскрывающемся списке вариант для .NET Framework 4.7 отсутствует, тогда
// вам придется установить пакет Microsoft .NET Framework 4.7 Developer Pack, доступный по адресу
// https://www.microsoft.com/ru-ru/download/details.aspx?id=55168. Чтобы
// получить упомянутый пакет, можно также выбрать в раскрывающемся списке вариант Install
// other frameworks... (Установить другие инфраструктуры...).

// После создания проекта вы увидите содержимое начального файла кода C# (по имени
// Program, cs), который открывается в редакторе кода. Добавьте в метод Main() следующий
// код С#. Набирая код, вы заметите, что во время применения операции точки
// активизируется средство IntelliSense.


using System;
using System.Windows.Forms;

namespace SimpleCSharpConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Set up Console UI (CUI) (Настройка консольного пользовательского интерфейса.)
            Console.Title = "My Rocking App";
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.BackgroundColor = ConsoleColor.Blue;
            Console.WriteLine(new string('*', 37));
            Console.WriteLine("***** Welcome to My Rocking App *****");
            Console.WriteLine(new string('*', 37));
            Console.BackgroundColor = ConsoleColor.Black;

            // Wait for Enter key to be pressed.(Ожидание нажатия клавиши <Enter>.)
            Console.ReadLine();
            MessageBox.Show("Программа выполнена!");
        }
    }
}

// Здесь используется класс Console, определенный в пространстве имен System.
// Поскольку пространство имен System было автоматически включено посредством оператора
// using в начале файла, указывать System перед именем класса не обязательно (например,
// System.Console.WriteLine ()). Данная программа не делает ничего особо интересного;
// тем не менее, обратите внимание на последний вызов Console. ReadLine ().
// Он просто обеспечивает поведение, при котором пользователь должен нажать клавишу
// <Enter>, чтобы завершить приложение. Если этого не сделать, то программа исчезнет
// почти мгновенно при проведении ее отладки!

// Использование средств C# 7.1

// На время написания книги среда Visual Studio не поддерживала создание проектов
// C# 7.1. Задействовать новые средства языка можно двумя способами. Первый способ — обновить
// файл проекта вручную, а второй — позволить Visual Studio помочь с обновлением
// файла проекта (в форме значка с изображением лампочки, который инициирует быстрое
// исправление). Несмотря на то что второй способ выглядит проще, в настоящий момент
// он ненадежен, но в будущих выпусках Visual Studio ситуация наверняка улучшится.

// Чтобы обновить файл проекта, откройте файл SimpleCSharpConsoleApp.csprog в
// любом текстовом редакторе (кроме Visual Studio) и приведите группы свойств Debug
// (отладка) и Release(выпуск) к показанному ниже виду:

// <PropertyGroup Condition=" '$(Configuration) |$(Platform)' == 'Debug|AnyCPU' ">
//      <PlatformTarget>AnyCPU</PlatformTarget>
//      <DebugSymbols>true</DebugSymbols>
//      <DebugType>full</DebugType>
//      <Optimize>false</Optimize>
//      <OutputPath>bin\Debug\</OutputPath>
//      <DefineConstants>DEBUG;TRACE</DefineConstants>
//      <ErrorReport>prompt</ErrorReport>
//      <WarningLevel>4</WarningLevel>
//      <LangVersion>7.l</LangVersion>
// </PropertyGroup>
// <PropertyGroup Condition=" ’$ (Configuration) |$(Platform)' == ' Release|AnyCPU' " >
//      <PlatformTarget>AnyCPU</PlatformTarget>
//      <DebugType>pdbonly</DebugType>
//      <Optimize>true</Optimize>
//      <OutputPath>bin\Release\</OutputPath>
//      <DefineConstants>TRACE</DefineConstants>
//      <ErrorReport>prompt</ErrorReport>
//      <WarningLevel>4</WarningLevel>
//      <LangVersion>7.l</LangVersion>
// </PropertyGroup>

// Запуск и отладка проекта

// Теперь для запуска программы и просмотра вывода можете просто нажать комбинацию
// клавиш <Ctrl+F5> (или выбрать пункт меню Debug->Start Without Debugging
// (Отладка->Запустить без отладки)). На экране появится окно консоли Windows с вашим
// специальным (раскрашенным) сообщением. Вы должны понимать, что когда “запускаете”
// свою программу, то обходите интегрированный отладчик.

// Если написанный код нужно отладить (что определенно станет важным при построении
// более крупных программ), тогда первым делом понадобится поместить точки
// останова на операторы кода, которые необходимо исследовать. Хотя в рассматриваемом
// примере не особенно много кода, установите точку останова, щелкнув на крайней слева
// полосе серого цвета в окне редактора кода (обратите внимание, что точки останова
// помечаются значком в виде красного кружка (рис. 2.4)).

// Если теперь нажать клавишу <F5> (или выбрать пункт меню Debug->Start Debugging
// (Отладка->Запустить с отладкой) либо щелкнуть на кнопке с зеленой стрелкой и надписью
// Start (Пуск) в панели инструментов), то программа будет прекращать работу на
// каждой точке останова. Как и можно было ожидать, у вас есть возможность взаимодействовать
// с отладчиком с помощью разнообразных кнопок панели инструментов и
// пунктов меню IDE-среды. После прохождения всех точек останова приложение в конечном
// итоге завершится, когда закончится метод Main().

// На заметку!
// Предлагаемые Microsoft среды IDE снабжены современными отладчиками, и в последующих
// главах вы изучите разнообразные приемы работы с ними. Пока нужно лишь знать, что
// при нахождении в сеансе отладки в меню Debug появляется большое количество полезных
// пунктов. Выделите время на ознакомление с ними.

// Окно Solution Explorer

// Взглянув на правую часть IDE-среды, вы заметите окно под названием Solution
// Explorer (Проводник решений), в котором отображено несколько важных элементов.
// Первым делом обратите внимание, что IDE-среда создала решение с единственным проектом
// (рис. 2.5). Поначалу это может сбивать с толку, т.к. решение и проект имеют одно
// и то же имя (SimpleCSharpConsoleApp). Идея в том, что “решение” может содержать
// множество проектов, работающих совместно. Скажем, в состав решения могут входить
// три библиотеки классов, одно приложение WPF и одна веб-служба WCE В начальных
// главах книги будет всегда применяться одиночный проект; однако, когда мы займемся
// построением более сложных примеров, будет показано, каким образом добавлять новые
// проекты в первоначальное пространство решения.

// На заметку!
// Учтите, что в случае выбора решения в самом верху окна Solution Explorer система
// меню IDE-среды будет отображать набор пунктов, который отличается от ситуации, когда выбран
// проект. Если вы когда-нибудь обнаружите, что определенный пункт меню исчез, то проверьте,
// не выбран ли случайно неправильный узел.

// Вы также заметите узел References (Ссылки). Его можно использовать, когда приложение
// нуждается в ссылке на дополнительные библиотеки .NET помимо тех, которые
// по умолчанию включаются для данного типа проекта. Поскольку был создан проект
// Console Application на языке С#, вы увидите несколько автоматически добавленных
// библиотек, таких как System.dll, System.Core.dll, System.Data.dll и т.д. (обратите
// внимание, что элементы, перечисленные в узле References, не отображают файловое
// расширение .dll). Вскоре будет показано, как добавлять библиотеки к проекту.

// На заметку!
// Вспомните из главы 1, что все проекты .NET имеют доступ к фундаментальной библиотеке
// по имени mscorlib.dll. Она настолько необходима, что даже явно не отображается
// в окне Solution Explorer.

// Окно Object Browser

// Если щелкнуть правой кнопкой мыши на любой библиотеке в узле References и выбрать
// в контекстном меню пункт View in Object Browser (Просмотреть в браузере объектов),
// то откроется интегрированное окно Object Browser (Браузер объектов); его также
// можно открыть с помощью меню View (Вид). С применением данного инструмента можно
// просматривать разнообразные пространства имен в сборке, типы в пространстве
// имен и члены каждого типа. На рис. 2.6 показано окно Object Browser, которое отображает
// ряд пространств имен в постоянно присутствующей сборке mscorlib.dll.

// Окно Object Browser может оказаться полезным, когда необходимо увидеть внутреннюю
// организацию какой-то библиотеки .NET, а также получить краткое описание
// заданного элемента. Кроме того, обратите внимание на поле <Search> (<Поиск>) в верхней
// части окна. Оно может быть удобным, если вы знаете имя типа, который нужно использовать,
// но не имеете понятия, где он находится. В качестве связанного замечания
// имейте в виду, что по умолчанию средство поиска будет искать только в библиотеках,
// задействованных в решении (чтобы производить поиск в рамках всей инфраструктуры
// .NET Framework, понадобится изменить выбранный элемент в раскрывающемся списке Browse (Просмотр)).

// Ссылка на дополнительные сборки

// Продолжая исследование, давайте добавим сборку (также известную как библиотека
// кода), которая не включается в проект Console Application автоматически. Для
// этого щелкните правой кнопкой мыши на узле References в окне Solution Explorer и
// выберите в контекстном меню пункт Add Reference (Добавить ссылку) или же выберите
// пункт меню Project->Add Reference (Проект->Добавить ссылку). В открывшемся
// диалоговом окне Add Reference (Добавление ссылки) отыщите библиотеку по имени
// System.Windows.Forms.dll (файловое расширение снова не показано) и отметьте флажок
// рядом с ней (рис. 2.7).

// После щелчка на кнопке ОК новая библиотека добавляется к нашему набору ссылок
// (вы увидите ее в списке под узлом References). Тем не менее, как объяснялось в главе 1,
// добавление ссылки на библиотеку — лишь первый шаг. Чтобы применять типы в определенном
// файле кода С#, понадобится указать оператор using.

// Добавьте следующую строку к директивам using в своем файле коде:

// using System.Windows.Forms;

// Затем поместите приведенную ниже строку кода сразу после вызова Console.
// ReadLine() в методе Main():

// MessageBox.Show("All done!”);

// Запустив или начав отладку программы еще раз, вы обнаружите, что перед завершением
// работы программы появляется простое диалоговое окно сообщения.

// Просмотр свойств проекта

// Далее обратите внимание на узел Properties (Свойства) в окне Solution Explorer.
// Двойной щелчок на нем приводит к открытию сложно устроенного редактора конфигурации
// проекта. Например, на рис. 2.8 видно, что можно изменять версию платформы
// .NET Framework, на которую нацелено решение.

// Различные аспекты окна свойств проекта будут обсуждаться в оставшихся главах
// книги. Здесь можно устанавливать разнообразные настройки безопасности, назначать
// сборке строгое имя (глава 14), развертывать приложение, вставлять ресурсы приложения
// и конфигурировать события, происходящие до и после построения.

// Визуальный конструктор классов

// Среда Visual Studio также снабжает вас возможностью конструирования классов и
// других типов (вроде интерфейсов или делегатов) в визуальной манере. Утилита Class
// Designer (Визуальный конструктор классов) позволяет просматривать и модифицировать
// отношения между типами (классами, интерфейсами, структурами, перечислениями
// и делегатами) в проекте.С помощью данного средства можно визуально добавлять (или
// удалять) члены типа с отражением этих изменений в соответствующем файле кода С#.
// Кроме того, по мере модификации отдельного файла кода C# изменения отражаются в
// диаграмме классов.

// Для доступа к инструментам визуального конструктора классов сначала понадобится
// вставить новый файл диаграммы классов. Выберите пункт меню Project->Add New
// Item (Проект->Добавить новый элемент) и в открывшемся окне найдите элемент Class
// Diagram (Диаграмма классов), как показано на рис. 2.9.

// Первоначально поверхность визуального конструктора будет пустой; тем не менее,
// вы можете перетаскивать на нее файлы из окна Solution Explorer. Например, после перетаскивания
// на поверхность конструктора файла Program, cs вы увидите визуальное
// представление класса Program. Щелкая на значке с изображением стрелки для заданного
// типа, можно отображать или скрывать его члены (рис. 2.10).

// На заметку!
// Используя панель инструментов утилиты Class Designer, можно настраивать параметры
// отображения поверхности визуального конструктора.

// Утилита Class Designer работает в сочетании с двумя другими средствами Visual
// Studio — окном Class Details (Детали класса), которое открывается через меню
// View->Other Windows (Вид->Другие окна), и панелью инструментов Class Designer, отображаемой
// выбором пункта меню View->Toolbox (Вид->Панель инструментов). Окно Class
// Details не только показывает подробные сведения о текущем выбранном элементе диаграммы,
// но также позволяет модифицировать существующие члены и вставлять новые члены на лету (рис. 2.11).

// Панель инструментов Class Designer, которая также может быть активизирована с
// применением меню View, позволяет вставлять в проект новые типы (и создавать между
// ними отношения) визуальным образом(рис. 2.12). (Чтобы видеть эту панель инструментов,
// должно быть активным окно диаграммы классов.) По мере выполнения таких
// действий IDE-среда создает на заднем плане новые определения типов на С#.

// Затем вы увидите, что определение класса Саг на С# было соответствующим образом
// обновлено (за исключением приведенного ниже комментария):

// public class Car
//  {
//    // Использовать открытые данные обычно не рекомендуется, но здесь это упрощает пример.
//    public string petName;
//  }

// Снова активизируйте утилиту Class Designer, перетащите на поверхность визуального
// конструктора еще один новый элемент Class и назначьте ему имя SportsCar. Далее
// выберите значок Inheritance (Наследование) в панели инструментов Class Designer и
// щелкните в верхней части значка SportsCar. Щелкните в верхней части значка класса
// Саг.Если все было сделано правильно, тогда класс SportsCar станет производным от
// класса Саг (рис. 2.14).

// На заметку!
// Концепция наследования исчерпывающе объясняется в главе 6.

// Чтобы завершить пример, обновите сгенерированный класс SportsCar, добавив открытый
// метод по имени GetPetName() со следующим кодом:

// public class SportsCar : Car
// {
//    public string GetPetName()
//      {
//          petName = "Fred”;
//          return petName;
//      }
// }

// Как и можно было ожидать, визуальный конструктор типов является одним из многочисленных
// средств Visual Studio Community. Ранее уже упоминалось, что в настоящем
// издании книги предполагается применение Visual Studio Community в качестве избранной
// IDE-среды. В последующих главах вы изучите намного больше возможностей данного инструмента.

// Исходный код.
// Проект SimpleCSharpConsoleApp находится в подкаталоге Chapter_2.

// Visual Studio 2017 Professional

// Как упоминалось в начале главы, главное отличие между редакциями Community
// и Professional связано с разрешенными сценариями использования. Если в настоящее
// время вы занимаете должность инженера по разработке программного обеспечения, то
// велики шансы того, что компания приобрела копию этой редакции, которая и является
// вашим избранным инструментом.

// Visual Studio 2017 Enterprise

// В завершение исследования редакций Visual Studio, выполняющихся под управлением
// Windows, давайте кратко рассмотрим Visual Studio 2017 Enterprise. Редакция
// Visual Studio 2017 Enterprise обладает всеми теми же средствами, что и Visual Studio
// Professional, а также дополнительными возможностями, направленными на организацию
// совместной корпоративной разработки и поддержку межплатформенной разработки
// мобильных приложений с помощью Xamarin.

// Мы больше не будем говорить о редакции Visual Studio 2017 Enterprise. Для целей
// данной книги подойдет любая из трех версий (Community, Professional и Enterprise).

// На заметку!
// По адресу https://www.visualstudio.com/ru/vs/compare/ можно ознакомиться
// с результатами сравнения версий Community, Professional и Enterprise.

// Система документации .NET Framework

// Последним аспектом Visual Studio, с которым вы должны уметь работать с самого
// начала, является полностью интегрированная справочная система. Документация .NET
// Framework представляет собой исключительно хороший, понятный и насыщенный полезной
// информацией источник. Из-за огромного количества предопределенных типов .NET
// (их тысячи) необходимо выделить время на исследование предлагаемой документации,
// иначе вряд ли вас ожидает особый успех на поприще разработки приложений .NET.

// Вы можете просматривать документацию .NET Framework по следующему адресу:

// https://docs.microsoft.com/ru-ru/dotnet/

// На заметку!
// Не будет удивительным, если в Microsoft когда-нибудь изменят местоположение
// онлайновой документации по библиотеке классов .NET Framework. В таком случае поиск в
// Интернете по ключевой фразе .NET Framework Class Library documentation поможет выяснить
// ее текущее местоположение.

// Оказавшись на главной странице, щелкните на элементе Switch to the Library TOC
// view (Переключиться на представление содержания библиотеки). Представление изменится
// на более легкое для навигации. Найдите узел .NET Development (Разработка .NET)
// и щелкните на стрелке, чтобы развернуть его. Затем щелкните на стрелке рядом с узлом
// .NET Framework 4.7, 4.6, and 4.5 (.NET Framework 4.7, 4.6 и 4.5). Наконец, щелкните
// на элементе .NET Framework class library (Библиотека классов.NET Framework). Далее
// вы можете применять окно с древовидным представлением для просмотра каждого пространства
// имен, типа и члена платформы. На рис. 2.15 показан пример просмотра типов
// пространства имен System.

// На заметку!
// Хотя это может выглядеть надоедливым повторением, нельзя еще раз не напомнить о
// том, насколько важно научиться пользоваться документацией .NET Framework. Ни одна книга, какой
// бы объемной она ни была, не способна охватить все аспекты платформы .NET. Непременно выделите
// время на освоение работы со справочной системой — впоследствии это окупится сторицей.

// Построение приложений.NET под управлением операционной системы, отличающейся от Windows

// Существует несколько вариантов построения приложений .NET под управлением ОС,
// отличающихся от Windows. Помимо Xamarin Studio есть также Visual Studio для Mac и
// Visual Studio Code (функционирует и в среде Linux). Типы приложений, которые могут быть
// построены с помощью упомянутых сред разработки, ограничиваются приложениями, ориентированными
// на использование под управлением .NET Core (Visual Studio Code и Visual
// Studio для Mac) либо на мобильных устройствах (Visual Studio для Mac, Xamarin Studio).

// Вот и все, что мы планировали сообщить в настоящей книге об инструментах разработки
// в средах, отличающихся от Windows. Но будьте уверены, что в Microsoft охватывают
// всех разработчиков, а не только тех, кто располагает компьютерами на основе Windows.

// Резюме

// Как вы могли заметить, в вашем распоряжении появилось много новых игрушек!
// Целью главы было проведение краткого экскурса в основные средства, которые программист
// на языке C# может задействовать во время разработки. В главе указывалось, что
// если вас интересует только построение приложений .NET на машине разработки с ОС
// Windows, то лучшим выбором следует считать загрузку и установку среды Visual Studio
// Community. Вдобавок упоминалось о том, что в данном издании книги будет применяться
// эта конкретная IDE-среда, стремительно набирающая обороты. Соответственно,
// предстоящие экранные снимки, пункты меню и визуальные конструкторы рассчитаны
// на то, что вы используете Visual Studio Community.

// Если вы хотите строить приложения .NET Core или межплатформенные мобильные
// приложения под управлением ОС, отличающейся от Windows, тогда лучшим выбором
// будет Visual Studio для Mac, Visual Studio Code или Xamarin Studio.