using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BasicConsoleIO
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.Unicode;

            Console.WriteLine("***** Basic Console I/O *****");
            GetUserData();
            FormatNumericalData();
            DisplayMessage();

            Console.ReadLine();
        }

        #region Get user data
        private static void GetUserData()
        {
            //Get name and age.
            //Получить информацию об имени и возрасте.
            Console.Write("Please enter your name: ");
            string userName = Console.ReadLine();
            Console.Write("Please enter your age: ");
            string userAge = Console.ReadLine();

            //Change echo color, just for fun.
            //Просто ради забавы изменить цвет переднего плана.
            ConsoleColor prevColor = Console.ForegroundColor;
            Console.ForegroundColor = ConsoleColor.Yellow;

            //Echo to the console.
            //Вывести полученную информацию на консоль.
            Console.WriteLine("Hello {0}! You are {1} years old.", userName, userAge);

            //Restore previous color.
            //Восстановить предыдущий цвет переднего плана.
            Console.ForegroundColor = prevColor;
        }
        #endregion

        #region Format numerical data
        //Now make use of some format tags.
        //Демонстрация применения некоторых дескрипторов формата.
        static void FormatNumericalData()
        {
            Console.WriteLine("The value 99999 in various formats:");
            Console.WriteLine("c format: {0:c}", 99999);
            Console.WriteLine("d9 format: {0:d9}", 99999);
            Console.WriteLine("f3 format: {0:f3}", 99999);
            Console.WriteLine("n format: {0:n}", 99999);
            //Notice that upper- or lowercasing for hex
            //determines if letters are upper- or lowercase.
            //Обратите внимание, что использование для символа шестнадцатеричного формата
            //верхнего или нижнего регистра определяет регистр отображаемых символов.
            Console.WriteLine("E format: {0:E}", 99999);
            Console.WriteLine("e format: {0:e}", 99999);
            Console.WriteLine("X format: {0:X}", 99999);
            Console.WriteLine("x format: {0:x}", 99999);
        }
        #endregion

        static void DisplayMessage()
        {
            //Использование string.Format() для форматирования строкового литерала.
            string userMessage = string.Format("100000 in hex is {0:x}", 100000);
            //Для успешной компиляции этой строки кода требуется
            //ссылка на библиотеку PresentationFramework.dll!
            System.Windows.MessageBox.Show(userMessage);
        }
    }
}

// Класс System.Console

// Почти во всех примерах приложений, создаваемых в начальных главах книги, будет
// интенсивно применяться класс System.Console. Справедливо заметить, что консольный
// пользовательский интерфейс может выглядеть не настолько привлекательно, как
// графический пользовательский интерфейс либо интерфейс веб-приложения. Однако
// ограничение первоначальных примеров консольными программами позволяет сосредоточиться
// на синтаксисе C# и ключевых аспектах платформы .NET, не отвлекаясь на
// сложности, которыми сопровождается построение настольных графических пользовательских
// интерфейсов или веб-сайтов.

// Класс Console инкапсулирует средства манипулирования потоками ввода, вывода
// и ошибок для консольных приложений. В табл. 3.2 перечислены некоторые (но определенно
// не все) интересные его члены. Как видите, в классе Console имеется ряд членов,
// которые оживляют простые приложения командной строки, позволяя, например, изменять
// цвета фона и переднего плана и выдавать звуковые сигналы (еще и различной частоты).

// Таблица 3.2.Избранные члены класса System.Console

// Член             Описание

// Веер ()          Этот метод заставляет консоль выдать звуковой сигнал указанной частоты и длительности

// BackgroundColor  Эти свойства устанавливают цвета фона и переднего плана для
// ForegroundColor  текущего вывода. Им можно присваивать любой член перечисления ConsoleColor

// BufferHeight      Эти свойства управляют высотой и шириной буферной области консоли
// BufferWidth

// Title            Это свойство получает или устанавливает заголовок текущей консоли

// WindowHeight      Эти свойства управляют размерами консоли по отношению к установленному буферу
// WindowWidth
// WindowTop
// WindowLeft

// Clear()           Этот метод очищает установленный буфер и область отображения консоли

// Базовый ввод-вывод с помощью класса Console

// Дополнительно к членам, описанным в табл. 3.2, класс Console определяет набор
// методов для захвата ввода и вывода; все они являются статическими и потому
// вызываются с префиксом в виде имени класса (Console). Как вы уже видели, метод
// WriteLine() помещает в поток вывода строку текста (включая символ возврата каретки).
// Метод Write() помещает в поток вывода текст без символа возврата каретки.
// Метод ReadLine() позволяет получить информацию из потока ввода вплоть до нажатия
// клавиши <Enter>. Метод Read() используется для захвата одиночного символа из потока ввода.

// Чтобы продемонстрировать реализацию базового ввода-вывода с применением класса
// Console, создадим новый проект консольного приложения по имени BasicConsoleIO
// и модифицируем метод Main() для вызова вспомогательного метода GetUserData ():

// class Program
// {
//    static void Main(string[] args)
//    {
//        Console.WriteLine("***** Basic Console I/O *****");
//        GetUserData();
//        Console.ReadLine();
//    }
//    private static void GetUserData()
//    {
//    }
// }

// На заметку!
// Среда Visual Studio поддерживает несколько “фрагментов кода", которые после своей
// активизации вставляют код. Фрагмент кода cw очень полезен в начальных главах книги, т.к.
// он автоматически разворачивается в вызов метода Console .WriteLine(). Чтобы удостовериться
// в этом, введите cw где-нибудь внутри метода Main() и два раза нажмите клавишу
// <ТаЬ> (к сожалению, фрагмент кода для метода Console.ReadLine() отсутствует). Чтобы
// просмотреть все фрагменты кода, щелкните правой кнопкой мыши в файле кода C# и в открывшемся
// контекстном меню выберите пункт Insert Snippet (Вставить фрагмент кода).

// Теперь реализуем метод GetUserData() внутри класса Program, поместив в него логику,
// которая приглашает пользователя ввести некоторые сведения и затем дублирует
// их в стандартный поток вывода. Скажем, мы могли бы запросить у пользователя его
// имя и возраст (который для простоты будет трактоваться как текстовое значение, а не
// привычное числовое):

// static void GetUserData()
// {
//    //Получить информацию об имени и возрасте.
//    Console.Write("Please enter your name: "); //Предложить ввести имя
//    string userName = Console.ReadLine();
//    Console.Write("Please enter your age: "); //Предложить ввести возраст
//    string userAge = Console.ReadLine();

//    //Просто ради забавы изменить цвет переднего плана.
//    ConsoleColor prevColor = Console.ForegroundColor;
//    Console.ForegroundColor = ConsoleColor.Yellow;

//    //Вывести полученную информацию на консоль.
//    Console.WriteLine("Hello {0}' You are {1} years old.", userName, userAge);

//    //Восстановить предыдущий цвет переднего плана.
//    Console.ForegroundColor = prevColor;
//}

// После запуска приложения входные данные вполне предсказуемо будут выводиться
// в окно консоли (с использованием указанного специального цвета).

// Форматирование консольного вывода

// В ходе изучения первых нескольких глав вы могли заметить, что внутри различных
// строковых литералов часто встречались такие конструкции, как {0} и {1}. Платформа
// .NET поддерживает стиль форматирования строк, который немного напоминает стиль,
// применяемый в операторе printf() языка С. Попросту говоря, когда вы определяете
// строковый литерал, содержащий сегменты данных, значения которых остаются неизвестными
// до этапа выполнения, то имеете возможность указывать заполнитель, используя
// синтаксис с фигурными скобками.Во время выполнения все заполнители замещаются
// значениями, передаваемыми методу Console.WriteLine().

// Первый параметр метода WriteLine() представляет строковый литерал, который
// содержит заполнители, определяемые с помощью {0}, {1}, {2} и т.д.Запомните, что
// порядковые числа заполнителей в фигурных скобках всегда начинаются с 0. Остальные
// параметры WriteLine() — это просто значения, подлежащие вставке вместо соответствующих
// заполнителей.

// На заметку!
// Если уникально нумерованных заполнителей больше, чем заполняющих аргументов,
// тогда во время выполнения будет сгенерировано исключение, связанное с форматом. Однако
// если количество заполняющих аргументов превышает число заполнителей, то лишние аргументы
// просто игнорируются.

// Отдельный заполнитель допускается повторять внутри заданной строки. Например,
// если вы битломан и хотите построить строку “9, Number 9, Number 9”, тогда могли бы
// написать такой код:

// //Джон говорит.. .
// Console.WriteLine ("{0}, Number {0}, Number {0}", 9);

// Также вы должны знать о возможности помещения каждого заполнителя в любую
// позицию внутри строкового литерала. К тому же вовсе не обязательно, чтобы заполнители
// следовали в возрастающем порядке своих номеров, например:

// Console.WriteLine("{1}, {0}, {2}”, 10, 20, 30);

// Выводит: 20, 10, 30

// Форматирование числовых данных

// Если для числовых данных требуется более сложное форматирование, то каждый заполнитель
// может дополнительно содержать разнообразные символы форматирования,
// наиболее распространенные из которых описаны в табл. 3.3.

//Таблица 3.3. Символы для форматирования числовых данных в .NET

//Символ                Описание
//форматирования 

//С или с               Используется для форматирования денежных значений. По умолчанию
//                      значение предваряется символом локальной валюты (например,
//                      знаком доллара ($) для культуры US English)

//D или d               Используется для форматирования десятичных чисел. В этом флаге можно
//                      также указывать минимальное количество цифр для представления значения

//Е или е               Используется для экспоненциального представления. Регистр этого флага
//                      указывает, в каком регистре должна представляться экспоненциальная константа
//                      — в верхнем (Е) или в нижнем (е)

//F ИЛИ f               Используется для форматирования с фиксированной точкой. В этом флаге можно
//                      также указывать минимальное количество цифр для представления значения

//G или g               Обозначает общий (general) формат. Этот флаг может использоваться для
//                      представления чисел в формате с фиксированной точкой или экспоненциальном формате

//N или n               Используется для базового числового форматирования (с запятыми)

//X или х               Используется для шестнадцатеричного форматирования. В случае символа X
//                      в верхнем регистре шестнадцатеричное представление будет содержать символы
//                      верхнего регистра

// Символы форматирования добавляются к заполнителям в виде суффиксов после двоеточия
// (например, {0:С}, {1:d}, {2:X}). В целях иллюстрации изменим метод Main() для
// вызова нового вспомогательного метода по имени FormatNumericalData(), реализация
// которого в классе Program форматирует фиксированное числовое значение несколькими способами.

// //Демонстрация применения некоторых дескрипторов формата.
// static void FormatNumericalData()
// {
//      Console.WriteLine("The value 99999 in various formats:");
//      Console.WriteLine("c format: {0:c}", 99999);
//      Console.WriteLine("d9 format: {0:d9}", 99999);
//      Console.WriteLine("f3 format: {0:f3}", 99999);
//      Console.WriteLine("n format: {0:n}", 99999);
//      //Обратите внимание, что использование для символа шестнадцатеричного формата
//      //верхнего или нижнего регистра определяет регистр отображаемых символов.
//      Console.WriteLine("Е format: {0:Е}", 99999);
//      Console.WriteLine("е format: {0:е}", 99999);
//      Console.WriteLine("X format: {0:X}", 99999);
//      Console.WriteLine("x format: {0:x}", 99999);
// }

// Ниже показан вывод, получаемый в результате вызова метода FormatNumericalData():

// The value 99999 in various formats:
// c format: $99,999.00
// d9 format: 000099999
// f3 format: 99999.000
// n format: 99,999.00
// E format: 9.999900E+004
// e format: 9.999900e+004
// X format: 1869F
// x format: 1869f

// В дальнейшем будут встречаться и другие примеры форматирования; если вас интересует
// дополнительные сведения о форматировании строк в .NET, тогда обратитесь в
// документацию .NET Framework 4.7 SDK.

// Форматирование числовых данных за рамками консольных приложений

// Напоследок следует отметить, что применение символов форматирования строк
// .NET не ограничено консольными приложениями. Тот же самый синтаксис форматирования
// может быть использован при вызове статического метода string.Format().
// Прием удобен, когда необходимо формировать выходные текстовые данные во время
// выполнения в приложении любого типа (например, в настольном приложении с графическим
// пользовательским интерфейсом, веб-приложении ASP.NET и т.д.).

// Метод string.Format() возвращает новый объект string, который форматируется
// согласно предоставляемым флагам. Затем текстовые данные могут применяться
// любым желаемым образом. Предположим, что требуется создать графическое настольное
// приложение WPF и сформатировать строку, подлежащую отображению в окне сообщения.
// В приведенном ниже коде показано, как это сделать, но имейте в виду, что
// код не скомпилируется до тех пор, пока в проект не будет добавлена ссылка на сборку
// PresentationFramework.dll (добавление ссылок на библиотеки в Visual Studio рассматривалось
// в главе 2).

// static void DisplayMessage()
// {
//    //Использование string.Format() для форматирования строкового литерала.
//    string userMessage = string.Format("100000 in hex is {0:x}", 100000);
//    //Для успешной компиляции этой строки кода требуется
//    //ссылка на библиотеку PresentationFramework.dll!
//    System.Windows.MessageBox.Show(userMessage);
// }

// На заметку!
// Для представления заполнителей в фигурных скобках в .NET 4.6 и C# 6 появился
// альтернативный синтаксис, который называется интерполяцией строк. Мы исследуем такой
// подход позже в главе.